package com.example.gateway;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.client.RestTemplate;

@SpringBootApplication
public class GatewayServiceApplication {
    public static void main(String[] args) {
        SpringApplication.run(GatewayServiceApplication.class, args);
    }
}

@RestController
@RequestMapping("/gateway")
class GatewayController {

    private final RestTemplate restTemplate = new RestTemplate();

    @GetMapping("/connect-data")
    public String connectToDataService() {
        String response = restTemplate.getForObject("http://localhost:8082/data/health", String.class);
        return "Connected to DataService: " + response;
    }

    @GetMapping("/connect-storage")
    public String connectToStorageService() {
        String response = restTemplate.getForObject("http://localhost:8083/storage/health", String.class);
        return "Connected to StorageService: " + response;
    }

    @GetMapping("/health")
    public String healthCheck() {
        return "GatewayService is up!";
    }
}



===========================================================================


package com.example.data;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.client.RestTemplate;

@SpringBootApplication
public class DataServiceApplication {
    public static void main(String[] args) {
        SpringApplication.run(DataServiceApplication.class, args);
    }
}

@RestController
@RequestMapping("/data")
class DataController {

    private final RestTemplate restTemplate = new RestTemplate();

    @GetMapping("/connect-storage")
    public String connectToStorageService() {
        String response = restTemplate.getForObject("http://localhost:8083/storage/health", String.class);
        return "Connected to StorageService: " + response;
    }

    @GetMapping("/health")
    public String healthCheck() {
        return "DataService is up!";
    }
}



================================================================================


package com.example.storage;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

@SpringBootApplication
public class StorageServiceApplication {
    public static void main(String[] args) {
        SpringApplication.run(StorageServiceApplication.class, args);
    }
}

@RestController
@RequestMapping("/storage")
class StorageController {

    @GetMapping("/health")
    public String healthCheck() {
        return "StorageService is up!";
    }
}


=====================================================================================


<dependencies>
    <!-- Spring Boot Starter Web (for REST API) -->
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-web</artifactId>
    </dependency>

    <!-- Spring Boot Starter Actuator (for Health Check) -->
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-actuator</artifactId>
    </dependency>

    <!-- Spring Boot Starter Security (for Access Restrictions, optional) -->
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-security</artifactId>
    </dependency>

    <!-- Spring Boot DevTools (for hot reload, optional) -->
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-devtools</artifactId>
        <scope>runtime</scope>
        <optional>true</optional>
    </dependency>

    <!-- Spring Boot Starter Test (for unit tests, optional) -->
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-test</artifactId>
        <scope>test</scope>
    </dependency>

    <!-- Spring Boot Starter Validation (for request validation, optional) -->
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-validation</artifactId>
    </dependency>

    <!-- Lombok (to reduce boilerplate code, optional) -->
    <dependency>
        <groupId>org.projectlombok</groupId>
        <artifactId>lombok</artifactId>
        <scope>provided</scope>
    </dependency>

    <!-- Spring Boot Starter WebClient (for making API calls to other services) -->
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-webflux</artifactId>
    </dependency>
</dependencies>

============================================


import React, { useState } from "react";
import axios from "axios";

const App = () => {
  const [response, setResponse] = useState("");

  const checkService = async (service) => {
    let url = `http://localhost:${service}/actuator/health`;

    try {
      const res = await axios.get(url);
      setResponse(`${service}: ${res.data.status}`);
    } catch (error) {
      setResponse(`Error connecting to ${service}`);
    }
  };

  return (
    <div>
      <h1>Microservices Health Check</h1>
      <button onClick={() => checkService(8080)}>Check Gateway</button>
      <button onClick={() => checkService(8081)}>Check DataService</button>
      <button onClick={() => checkService(8082)}>Check StorageService</button>
      <p>{response}</p>
    </div>
  );
};

export default App;

======================================================

import React, { useState } from "react";
import axios from "axios";

const ServiceConnection = () => {
  const [response, setResponse] = useState("");

  // Get API URLs from environment variables
  const gatewayServiceUrl = process.env.REACT_APP_GATEWAY_SERVICE_URL;
  const dataServiceUrl = process.env.REACT_APP_DATA_SERVICE_URL;
  const storageServiceUrl = process.env.REACT_APP_STORAGE_SERVICE_URL;

  const checkService = async (service) => {
    let url = "";
    if (service === "gateway") url = `${gatewayServiceUrl}/actuator/health`;
    else if (service === "data") url = `${dataServiceUrl}/actuator/health`;
    else if (service === "storage") url = `${storageServiceUrl}/actuator/health`;

    try {
      const res = await axios.get(url);
      setResponse(`${service} response: ${res.data.status}`);
    } catch (error) {
      setResponse(`Error connecting to ${service}`);
    }
  };

  return (
    <div>
      <h1>Microservices Health Check</h1>
      <button onClick={() => checkService("gateway")}>Check Gateway</button>
      <button onClick={() => checkService("data")}>Check DataService</button>
      <button onClick={() => checkService("storage")}>Check StorageService</button>
      <p>{response}</p>
    </div>
  );
};

export default ServiceConnection;

======================================================

package com.example.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.web.servlet.config.annotation.CorsRegistry;
import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;

@Configuration
public class CorsConfig {
    @Bean
    public WebMvcConfigurer corsConfigurer() {
        return new WebMvcConfigurer() {
            @Override
            public void addCorsMappings(CorsRegistry registry) {
                registry.addMapping("/**")
                        .allowedOrigins("*") // Allow all origins (Change this in production)
                        .allowedMethods("GET", "POST", "PUT", "DELETE", "OPTIONS")
                        .allowedHeaders("*");
            }
        };
    }
}

======================================================
# Use OpenJDK 17 as base image
FROM openjdk:17
WORKDIR /app
COPY target/*.jar app.jar
EXPOSE 8080
CMD ["java", "-jar", "app.jar"]
======================================================
# Use Node.js for building the React app
FROM node:18 as build-stage
WORKDIR /app
COPY package.json ./
RUN npm install
COPY . .
RUN npm run build

# Use Nginx to serve the frontend
FROM nginx:alpine
COPY --from=build-stage /app/build /usr/share/nginx/html
EXPOSE 8080
CMD ["nginx", "-g", "daemon off;"]
======================================================

version: "3.8"

services:
  gateway-service:
    build: ./gateway-service
    container_name: gateway-service
    ports:
      - "8080:8080"
    environment:
      - SERVER_PORT=8080
    networks:
      - microservices-net
    depends_on:
      - data-service
      - storage-service

  data-service:
    build: ./data-service
    container_name: data-service
    environment:
      - SERVER_PORT=8081
    networks:
      - microservices-net

  storage-service:
    build: ./storage-service
    container_name: storage-service
    environment:
      - SERVER_PORT=8082
    networks:
      - microservices-net

  frontend:
    build: ./frontend
    container_name: frontend
    ports:
      - "8080:8080"
    depends_on:
      - gateway-service
    networks:
      - microservices-net

networks:
  microservices-net:
    driver: bridge
