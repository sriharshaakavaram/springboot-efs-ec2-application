import streamlit as st
import os
import subprocess

# Streamlit Application Title
st.title("üîπ AWS EFS File Operations with Dynamic Path Input")

# Extract query parameters to check if this is a health check request
query_params = st.query_params

if "health" in query_params:
    # Return a simple health check response
    st.write("OK")
else:
    # User input for EFS path
    efs_path = st.text_input("Enter EFS Mount Path:", "/mnt/efs")

    if os.path.exists(efs_path):
        st.success(f"‚úÖ EFS path '{efs_path}' is accessible.")
        
        # Define file path
        file_name = "efs_test_file.txt"
        file_path = os.path.join(efs_path, file_name)

        # File Operations
        if st.button("Generate File in EFS"):
            try:
                with open(file_path, "w") as f:
                    f.write("This is a test file stored in AWS EFS.\nWorks across platforms!")
                st.success(f"‚úÖ File '{file_name}' created successfully in EFS!")
            except Exception as e:
                st.error(f"‚ùå Error creating file: {e}")

        if st.button("Read File from EFS"):
            if os.path.exists(file_path):
                try:
                    with open(file_path, "r") as f:
                        content = f.read()
                    st.text_area("üìÑ File Content:", content, height=150)
                except Exception as e:
                    st.error(f"‚ùå Error reading file: {e}")
            else:
                st.warning(f"‚ö†Ô∏è File '{file_name}' does not exist in EFS!")

        if st.button("Delete File from EFS"):
            if os.path.exists(file_path):
                try:
                    os.remove(file_path)
                    st.success(f"üóëÔ∏è File '{file_name}' deleted from EFS!")
                except Exception as e:
                    st.error(f"‚ùå Error deleting file: {e}")
            else:
                st.warning(f"‚ö†Ô∏è File '{file_name}' does not exist in EFS!")

    else:
        st.error(f"‚ùå EFS path '{efs_path}' does not exist! Ensure it is mounted.")

    # OS Command Execution
    st.subheader("‚ö° Execute OS Commands")
    command = st.text_input("Enter your command:")
    if st.button("Run Command"):
        if command:
            try:
                result = subprocess.run(command, shell=True, capture_output=True, text=True)
                st.text_area("üñ•Ô∏è Command Output:", result.stdout + result.stderr, height=200)
            except Exception as e:
                st.error(f"‚ùå Error executing command: {e}")
        else:
            st.warning("‚ö†Ô∏è Please enter a command.")
