package com.example.gateway;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.client.RestTemplate;

@SpringBootApplication
public class GatewayServiceApplication {
    public static void main(String[] args) {
        SpringApplication.run(GatewayServiceApplication.class, args);
    }
}

@RestController
@RequestMapping("/gateway")
class GatewayController {

    private final RestTemplate restTemplate = new RestTemplate();

    @GetMapping("/connect-data")
    public String connectToDataService() {
        String response = restTemplate.getForObject("http://localhost:8082/data/health", String.class);
        return "Connected to DataService: " + response;
    }

    @GetMapping("/connect-storage")
    public String connectToStorageService() {
        String response = restTemplate.getForObject("http://localhost:8083/storage/health", String.class);
        return "Connected to StorageService: " + response;
    }

    @GetMapping("/health")
    public String healthCheck() {
        return "GatewayService is up!";
    }
}



===========================================================================


package com.example.data;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.client.RestTemplate;

@SpringBootApplication
public class DataServiceApplication {
    public static void main(String[] args) {
        SpringApplication.run(DataServiceApplication.class, args);
    }
}

@RestController
@RequestMapping("/data")
class DataController {

    private final RestTemplate restTemplate = new RestTemplate();

    @GetMapping("/connect-storage")
    public String connectToStorageService() {
        String response = restTemplate.getForObject("http://localhost:8083/storage/health", String.class);
        return "Connected to StorageService: " + response;
    }

    @GetMapping("/health")
    public String healthCheck() {
        return "DataService is up!";
    }
}



================================================================================


package com.example.storage;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

@SpringBootApplication
public class StorageServiceApplication {
    public static void main(String[] args) {
        SpringApplication.run(StorageServiceApplication.class, args);
    }
}

@RestController
@RequestMapping("/storage")
class StorageController {

    @GetMapping("/health")
    public String healthCheck() {
        return "StorageService is up!";
    }
}


=====================================================================================


<dependencies>
    <!-- Spring Boot Starter Web (for REST API) -->
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-web</artifactId>
    </dependency>

    <!-- Spring Boot Starter Actuator (for Health Check) -->
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-actuator</artifactId>
    </dependency>

    <!-- Spring Boot Starter Security (for Access Restrictions, optional) -->
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-security</artifactId>
    </dependency>

    <!-- Spring Boot DevTools (for hot reload, optional) -->
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-devtools</artifactId>
        <scope>runtime</scope>
        <optional>true</optional>
    </dependency>

    <!-- Spring Boot Starter Test (for unit tests, optional) -->
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-test</artifactId>
        <scope>test</scope>
    </dependency>

    <!-- Spring Boot Starter Validation (for request validation, optional) -->
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-validation</artifactId>
    </dependency>

    <!-- Lombok (to reduce boilerplate code, optional) -->
    <dependency>
        <groupId>org.projectlombok</groupId>
        <artifactId>lombok</artifactId>
        <scope>provided</scope>
    </dependency>

    <!-- Spring Boot Starter WebClient (for making API calls to other services) -->
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-webflux</artifactId>
    </dependency>
</dependencies>

============================================


import React, { useState } from "react";
import axios from "axios";

const App = () => {
  const [response, setResponse] = useState("");

  const checkService = async (service) => {
    let url = `http://localhost:${service}/actuator/health`;

    try {
      const res = await axios.get(url);
      setResponse(`${service}: ${res.data.status}`);
    } catch (error) {
      setResponse(`Error connecting to ${service}`);
    }
  };

  return (
    <div>
      <h1>Microservices Health Check</h1>
      <button onClick={() => checkService(8080)}>Check Gateway</button>
      <button onClick={() => checkService(8081)}>Check DataService</button>
      <button onClick={() => checkService(8082)}>Check StorageService</button>
      <p>{response}</p>
    </div>
  );
};

export default App;

======================================================

import React, { useState } from "react";
import axios from "axios";

const ServiceConnection = () => {
  const [response, setResponse] = useState("");

  // Get API URLs from environment variables
  const gatewayServiceUrl = process.env.REACT_APP_GATEWAY_SERVICE_URL;
  const dataServiceUrl = process.env.REACT_APP_DATA_SERVICE_URL;
  const storageServiceUrl = process.env.REACT_APP_STORAGE_SERVICE_URL;

  const checkService = async (service) => {
    let url = "";
    if (service === "gateway") url = `${gatewayServiceUrl}/actuator/health`;
    else if (service === "data") url = `${dataServiceUrl}/actuator/health`;
    else if (service === "storage") url = `${storageServiceUrl}/actuator/health`;

    try {
      const res = await axios.get(url);
      setResponse(`${service} response: ${res.data.status}`);
    } catch (error) {
      setResponse(`Error connecting to ${service}`);
    }
  };

  return (
    <div>
      <h1>Microservices Health Check</h1>
      <button onClick={() => checkService("gateway")}>Check Gateway</button>
      <button onClick={() => checkService("data")}>Check DataService</button>
      <button onClick={() => checkService("storage")}>Check StorageService</button>
      <p>{response}</p>
    </div>
  );
};

export default ServiceConnection;

======================================================

package com.example.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.web.servlet.config.annotation.CorsRegistry;
import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;

@Configuration
public class CorsConfig {
    @Bean
    public WebMvcConfigurer corsConfigurer() {
        return new WebMvcConfigurer() {
            @Override
            public void addCorsMappings(CorsRegistry registry) {
                registry.addMapping("/**")
                        .allowedOrigins("*") // Allow all origins (Change this in production)
                        .allowedMethods("GET", "POST", "PUT", "DELETE", "OPTIONS")
                        .allowedHeaders("*");
            }
        };
    }
}

======================================================
# Use OpenJDK 17 as base image
FROM openjdk:17
WORKDIR /app
COPY target/*.jar app.jar
EXPOSE 8080
CMD ["java", "-jar", "app.jar"]
======================================================
# Use Node.js for building the React app
FROM node:18 as build-stage
WORKDIR /app
COPY package.json ./
RUN npm install
COPY . .
RUN npm run build

# Use Nginx to serve the frontend
FROM nginx:alpine
COPY --from=build-stage /app/build /usr/share/nginx/html
EXPOSE 8080
CMD ["nginx", "-g", "daemon off;"]
======================================================

version: "3.8"

services:
  gateway-service:
    build: ./gateway-service
    container_name: gateway-service
    ports:
      - "8080:8080"
    environment:
      - SERVER_PORT=8080
    networks:
      - microservices-net
    depends_on:
      - data-service
      - storage-service

  data-service:
    build: ./data-service
    container_name: data-service
    environment:
      - SERVER_PORT=8081
    networks:
      - microservices-net

  storage-service:
    build: ./storage-service
    container_name: storage-service
    environment:
      - SERVER_PORT=8082
    networks:
      - microservices-net

  frontend:
    build: ./frontend
    container_name: frontend
    ports:
      - "8080:8080"
    depends_on:
      - gateway-service
    networks:
      - microservices-net

networks:
  microservices-net:
    driver: bridge


----------------------------------------------------------------

# Use Amazon Linux 2023 as the base image
FROM amazonlinux:2023

# Set working directory
WORKDIR /app

# Install Java 17
RUN dnf update -y && \
    dnf install java-17-amazon-corretto -y

# Copy JAR file to container
COPY target/*.jar app.jar

# Expose application port
EXPOSE 8080

# Run the application
CMD ["java", "-jar", "app.jar"]
=============================================

import React from 'react';
import ServiceConnection from './components/ServiceConnection';

function App() {
  return (
    <div>
      <h1>Microservices Connectivity</h1>
      <ServiceConnection />
    </div>
  );
}

export default App;

===============================================================

import React, { useState } from "react";
import axios from "axios";

const ServiceConnection = () => {
  const [response, setResponse] = useState("");

  const checkService = async (service) => {
    let url = "";
    if (service === "gateway") url = "http://localhost:8080/gateway/health";
    else if (service === "data") url = "http://localhost:8081/data/health";
    else if (service === "storage") url = "http://localhost:8082/storage/health";

    try {
      const res = await axios.get(url);
      setResponse(res.data);
    } catch (error) {
      setResponse("Error connecting to " + service);
    }
  };

  return (
    <div>
      <button onClick={() => checkService("gateway")}>Check Gateway</button>
      <button onClick={() => checkService("data")}>Check DataService</button>
      <button onClick={() => checkService("storage")}>Check StorageService</button>
      <p>{response}</p>
    </div>
  );
};

export default ServiceConnection;



curl -X POST "https://login.microsoftonline.com/{TENANT_ID}/oauth2/v2.0/token" \
     -H "Content-Type: application/x-www-form-urlencoded" \
     -d "client_id={YOUR_CLIENT_ID}" \
     -d "client_secret={YOUR_CLIENT_SECRET}" \
     -d "scope=https://graph.microsoft.com/.default" \
     -d "grant_type=client_credentials"
================================================================

import streamlit as st
import boto3
import os

# AWS SQS Configuration
AWS_REGION = "us-east-1"  # Change to your AWS region
QUEUE_URL = "https://sqs.us-east-1.amazonaws.com/your-account-id/your-queue-name"

# Initialize SQS Client
sqs_client = boto3.client(
    "sqs",
    region_name=AWS_REGION,
    aws_access_key_id=os.getenv("AWS_ACCESS_KEY_ID"),
    aws_secret_access_key=os.getenv("AWS_SECRET_ACCESS_KEY"),
)

# Streamlit UI
st.title("AWS SQS Functionality Test")

# Send Message to SQS
st.header("Send a Message to SQS")
message_input = st.text_area("Enter message to send")

if st.button("Send Message"):
    if message_input:
        response = sqs_client.send_message(
            QueueUrl=QUEUE_URL,
            MessageBody=message_input
        )
        st.success(f"Message sent! Message ID: {response['MessageId']}")
    else:
        st.error("Message cannot be empty.")

# Receive Messages from SQS
st.header("Receive Messages from SQS")

if st.button("Receive Message"):
    response = sqs_client.receive_message(
        QueueUrl=QUEUE_URL,
        MaxNumberOfMessages=1,
        WaitTimeSeconds=5
    )

    messages = response.get("Messages", [])
    
    if messages:
        for msg in messages:
            st.write(f"Message ID: {msg['MessageId']}")
            st.write(f"Message Body: {msg['Body']}")

            # Delete the message after reading to avoid duplicate processing
            sqs_client.delete_message(
                QueueUrl=QUEUE_URL,
                ReceiptHandle=msg["ReceiptHandle"]
            )
            st.success("Message processed and deleted!")
    else:
        st.warning("No messages available in the queue.")

=======================================================

Dear [Name],

It’s truly bittersweet to say goodbye. Working with you has been an incredible experience—your guidance, support, and leadership have left a lasting impact on me, both professionally and personally. You’ve not only led with integrity and vision but also with kindness and approachability that made it easy to learn and grow under your wing.

Your presence will be deeply missed, but I’m genuinely excited for what lies ahead for you. Wishing you continued success, happiness, and all the amazing things you deserve in this next chapter.

Thank you for everything, [Name]. You’ll always be remembered fondly.

Warmest regards,
[Your Name]
