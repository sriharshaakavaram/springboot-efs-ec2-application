package com.example.gateway;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.client.RestTemplate;

@SpringBootApplication
public class GatewayServiceApplication {
    public static void main(String[] args) {
        SpringApplication.run(GatewayServiceApplication.class, args);
    }
}

@RestController
@RequestMapping("/gateway")
class GatewayController {

    private final RestTemplate restTemplate = new RestTemplate();

    @GetMapping("/connect-data")
    public String connectToDataService() {
        String response = restTemplate.getForObject("http://localhost:8082/data/health", String.class);
        return "Connected to DataService: " + response;
    }

    @GetMapping("/connect-storage")
    public String connectToStorageService() {
        String response = restTemplate.getForObject("http://localhost:8083/storage/health", String.class);
        return "Connected to StorageService: " + response;
    }

    @GetMapping("/health")
    public String healthCheck() {
        return "GatewayService is up!";
    }
}



===========================================================================


package com.example.data;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.client.RestTemplate;

@SpringBootApplication
public class DataServiceApplication {
    public static void main(String[] args) {
        SpringApplication.run(DataServiceApplication.class, args);
    }
}

@RestController
@RequestMapping("/data")
class DataController {

    private final RestTemplate restTemplate = new RestTemplate();

    @GetMapping("/connect-storage")
    public String connectToStorageService() {
        String response = restTemplate.getForObject("http://localhost:8083/storage/health", String.class);
        return "Connected to StorageService: " + response;
    }

    @GetMapping("/health")
    public String healthCheck() {
        return "DataService is up!";
    }
}



================================================================================


package com.example.storage;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

@SpringBootApplication
public class StorageServiceApplication {
    public static void main(String[] args) {
        SpringApplication.run(StorageServiceApplication.class, args);
    }
}

@RestController
@RequestMapping("/storage")
class StorageController {

    @GetMapping("/health")
    public String healthCheck() {
        return "StorageService is up!";
    }
}


=====================================================================================


<dependencies>
    <!-- Spring Boot Starter Web (for REST API) -->
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-web</artifactId>
    </dependency>

    <!-- Spring Boot Starter Actuator (for Health Check) -->
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-actuator</artifactId>
    </dependency>

    <!-- Spring Boot Starter Security (for Access Restrictions, optional) -->
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-security</artifactId>
    </dependency>

    <!-- Spring Boot DevTools (for hot reload, optional) -->
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-devtools</artifactId>
        <scope>runtime</scope>
        <optional>true</optional>
    </dependency>

    <!-- Spring Boot Starter Test (for unit tests, optional) -->
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-test</artifactId>
        <scope>test</scope>
    </dependency>

    <!-- Spring Boot Starter Validation (for request validation, optional) -->
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-validation</artifactId>
    </dependency>

    <!-- Lombok (to reduce boilerplate code, optional) -->
    <dependency>
        <groupId>org.projectlombok</groupId>
        <artifactId>lombok</artifactId>
        <scope>provided</scope>
    </dependency>

    <!-- Spring Boot Starter WebClient (for making API calls to other services) -->
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-webflux</artifactId>
    </dependency>
</dependencies>

============================================


import "bootstrap/dist/css/bootstrap.min.css";

export const metadata = {
  title: "API Health Check",
  description: "Monitor the health status of microservices",
};

export default function RootLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  return (
    <html lang="en">
      <body>{children}</body>
    </html>
  );
}

======================================================

"use client"; // This is needed for client-side fetching

import { useEffect, useState } from "react";
import axios from "axios";
import { Container, Table } from "react-bootstrap";

export default function Home() {
  const [status, setStatus] = useState({
    gateway: "Checking...",
    data: "Checking...",
    storage: "Checking...",
  });

  useEffect(() => {
    const fetchHealthStatus = async () => {
      try {
        const [gatewayRes, dataRes, storageRes] = await Promise.all([
          axios.get("http://localhost:8081/gateway/health"),
          axios.get("http://localhost:8082/data/health"),
          axios.get("http://localhost:8083/storage/health"),
        ]);

        setStatus({
          gateway: gatewayRes.data,
          data: dataRes.data,
          storage: storageRes.data,
        });
      } catch (error) {
        console.error("Error fetching health checks", error);
        setStatus({
          gateway: "Error",
          data: "Error",
          storage: "Error",
        });
      }
    };

    fetchHealthStatus();
  }, []);

  return (
    <Container className="mt-4">
      <h1>API Health Status</h1>
      <Table striped bordered hover className="mt-3">
        <thead>
          <tr>
            <th>Service</th>
            <th>Status</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td>GatewayService</td>
            <td>{status.gateway}</td>
          </tr>
          <tr>
            <td>DataService</td>
            <td>{status.data}</td>
          </tr>
          <tr>
            <td>StorageService</td>
            <td>{status.storage}</td>
          </tr>
        </tbody>
      </Table>
    </Container>
  );
}
