import streamlit as st
import os
import subprocess

# Get URL query parameters (Future-compatible way)
try:
    query_params = st.query_params  # If Streamlit introduces this in future updates
except AttributeError:
    query_params = st.experimental_get_query_params()  # Fallback

# Check if the request is for health check
if query_params.get("page") == ["health"]:
    st.write("OK")
else:
    # Streamlit Application Title
    st.title("üîπ AWS Storage Operations (EFS / FSx)")

    # Storage Type Selection (Dropdown)
    storage_type = st.selectbox("Select Storage Type:", ["EFS", "FSx"])

    # Set default paths based on selection
    default_paths = {"EFS": "/mnt/efs", "FSx": "/mnt/fsx"}
    storage_path = st.text_input("Enter Storage Mount Path:", default_paths[storage_type])

    if os.path.exists(storage_path):
        st.success(f"‚úÖ {storage_type} path '{storage_path}' is accessible.")

        # Define file path
        file_name = f"{storage_type.lower()}_test_file.txt"
        file_path = os.path.join(storage_path, file_name)

        # File Operations
        if st.button(f"Generate File in {storage_type}"):
            try:
                with open(file_path, "w") as f:
                    f.write(f"This is a test file stored in AWS {storage_type}.\nWorks across platforms!")
                st.success(f"‚úÖ File '{file_name}' created successfully in {storage_type}!")
            except Exception as e:
                st.error(f"‚ùå Error creating file: {e}")

        if st.button(f"Read File from {storage_type}"):
            if os.path.exists(file_path):
                try:
                    with open(file_path, "r") as f:
                        content = f.read()
                    st.text_area("üìÑ File Content:", content, height=150)
                except Exception as e:
                    st.error(f"‚ùå Error reading file: {e}")
            else:
                st.warning(f"‚ö†Ô∏è File '{file_name}' does not exist in {storage_type}!")

        if st.button(f"Delete File from {storage_type}"):
            if os.path.exists(file_path):
                try:
                    os.remove(file_path)
                    st.success(f"üóëÔ∏è File '{file_name}' deleted from {storage_type}!")
                except Exception as e:
                    st.error(f"‚ùå Error deleting file: {e}")
            else:
                st.warning(f"‚ö†Ô∏è File '{file_name}' does not exist in {storage_type}!")

    else:
        st.error(f"‚ùå {storage_type} path '{storage_path}' does not exist! Ensure it is mounted.")

    # OS Command Execution
    st.subheader("‚ö° Execute OS Commands")
    command = st.text_input("Enter your command:")
    if st.button("Run Command"):
        if command:
            try:
                result = subprocess.run(command, shell=True, capture_output=True, text=True)
                st.text_area("üñ•Ô∏è Command Output:", result.stdout + result.stderr, height=200)
            except Exception as e:
                st.error(f"‚ùå Error executing command: {e}")
        else:
            st.warning("‚ö†Ô∏è Please enter a command.")
