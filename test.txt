from flask import Flask, redirect, url_for, session, request
import requests
from urllib.parse import urlencode
import logging

app = Flask(__name__)
app.secret_key = 'your_secret_key'

# Replace with your OP configuration
OP_CONFIG = {
    'authorization_endpoint': 'https://your-op.com/authorize',
    'token_endpoint': 'https://your-op.com/token',
    'end_session_endpoint': 'https://your-op.com/logout',
    'client_id': 'your_client_id',
    'client_secret': 'your_client_secret',
    'redirect_uri': 'https://your-app.com/callback',
    'logout_redirect_uri': 'https://your-app.com/loggedout'
}

logging.basicConfig(level=logging.DEBUG)

@app.route('/')
def home():
    return 'Welcome to the Flask OIDC App'

@app.route('/login')
def login():
    authorization_url = OP_CONFIG['authorization_endpoint']
    params = {
        'response_type': 'code',
        'client_id': OP_CONFIG['client_id'],
        'redirect_uri': OP_CONFIG['redirect_uri'],
        'scope': 'openid email profile'
    }
    url = f"{authorization_url}?{urlencode(params)}"
    logging.debug(f"Authorization URL: {url}")
    return redirect(url)

@app.route('/callback')
def callback():
    code = request.args.get('code')
    if not code:
        logging.error("Authorization code not found in the request")
        return "Authorization code not found in the request", 400
    
    token_response = requests.post(OP_CONFIG['token_endpoint'], data={
        'grant_type': 'authorization_code',
        'code': code,
        'redirect_uri': OP_CONFIG['redirect_uri'],
        'client_id': OP_CONFIG['client_id'],
        'client_secret': OP_CONFIG['client_secret']
    })
    
    if token_response.status_code != 200:
        logging.error(f"Token endpoint returned an error: {token_response.json()}")
        return f"Token endpoint returned an error: {token_response.json()}", 400

    token_data = token_response.json()
    session['id_token'] = token_data.get('id_token')
    
    if 'id_token' not in token_data:
        logging.error("ID token not found in the token response")
        return "ID token not found in the token response", 400

    return redirect(url_for('home'))

@app.route('/logout')
def logout():
    id_token = session.pop('id_token', None)
    if id_token and OP_CONFIG.get('end_session_endpoint'):
        logout_url = OP_CONFIG['end_session_endpoint']
        params = {
            'id_token_hint': id_token,
            'post_logout_redirect_uri': OP_CONFIG['logout_redirect_uri']
        }
        return redirect(f"{logout_url}?{urlencode(params)}")
    return redirect(OP_CONFIG['logout_redirect_uri'])

@app.route('/loggedout')
def loggedout():
    return 'You have been logged out.'

if __name__ == '__main__':
    app.run(debug=True)
